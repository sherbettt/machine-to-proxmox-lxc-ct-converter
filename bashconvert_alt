#!/bin/bash

# Check if the 'pct' command is available on the host machine (Proxmox)
if ! command -v pct &> /dev/null
then
    echo "pct could not be found. This script must be run on the host machine Proxmox"
    exit 1
fi

# Function to display script usage
usage()
{
    cat <<EOF
$1 -h|--help
 -n|--name [LXC container name]
 -t|--target [target machine SSH URI]
 -P|--port [target SSH port]
 -i|--id [Proxmox container ID]
 -s|--root-size [rootfs size in GB]
 -a|--ip [target container IP]
 -b|--bridge [bridge interface]
 -g|--gateway [gateway IP]
 -m|--memory [memory in MB]
 -d|--disk-storage [target Proxmox storage pool]
 -p|--password [root password for container (min. 5 chars)]
EOF
    return 0
}

# Parse command-line options
options=$(getopt -o n:t:P:i:s:a:b:g:m:d:p: -l help,name:,target:,port:,id:,root-size:,ip:,bridge:,gateway:,memory:,disk-storage:,password: -- "$@")
if [ $? -ne 0 ]; then
    usage "$(basename "$0")"
    exit 1
fi
eval set -- "$options"

# Initialize variables
name=""
target=""
port="22"
id=""
rootsize=""
ip=""
bridge=""
gateway=""
memory=""
storage=""
password=""

# Process command-line options
while true
do
    case "$1" in
        -h|--help)          usage "$0" && exit 0;;
        -n|--name)          name=$2; shift 2;;
        -t|--target)        target=$2; shift 2;;
        -P|--port)          port=$2; shift 2;;
        -i|--id)            id=$2; shift 2;;
        -s|--root-size)     rootsize=$2; shift 2;;
        -a|--ip)            ip=$2; shift 2;;
        -b|--bridge)        bridge=$2; shift 2;;
        -g|--gateway)       gateway=$2; shift 2;;
        -m|--memory)        memory=$2; shift 2;;
        -p|--password)      password=$2; shift 2;;
        -d|--disk-storage)  storage=$2; shift 2;;
        --)                 shift; break ;;
        *)                  break ;;
    esac
done

# Validate required parameters
if [ -z "$name" ] || [ -z "$target" ] || [ -z "$id" ] || [ -z "$rootsize" ] || \
   [ -z "$ip" ] || [ -z "$bridge" ] || [ -z "$gateway" ] || [ -z "$memory" ] || \
   [ -z "$storage" ] || [ -z "$password" ]; then
    echo "Error: Missing required parameters!"
    usage "$0"
    exit 1
fi

# Function to collect file system data with ALT Linux compatibility
collectFS() {
    # Create compatibility files for ALT Linux
    if grep -qi "altlinux" /etc/os-release 2>/dev/null || [ -f /etc/altlinux-release ]; then
        echo "Detected ALT Linux, creating compatibility files..." >&2
        
        # Backup original release files
        cp /etc/os-release /etc/os-release.backup.convert 2>/dev/null || true
        [ -f /etc/altlinux-release ] && cp /etc/altlinux-release /etc/altlinux-release.backup.convert 2>/dev/null || true
        
        # Create proper Debian version file (simple version number)
        echo "11.0" > /etc/debian_version
        
        # Create minimal os-release for compatibility
        cat > /etc/os-release << 'EOF'
NAME="Debian GNU/Linux"
PRETTY_NAME="Debian GNU/Linux 11 (bullseye)"
VERSION_ID="11"
VERSION="11 (bullseye)"
ID=debian
HOME_URL="https://www.debian.org/"
SUPPORT_URL="https://www.debian.org/support"
BUG_REPORT_URL="https://bugs.debian.org/"
EOF
        
        # Ensure critical directories and files exist for LXC
        mkdir -p /etc/network
        mkdir -p /run/sshd
        mkdir -p /var/lock
        touch /var/lock/lock
        
        # Create basic network config
        cat > /etc/network/interfaces << 'EOF'
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF
        
        # Ensure resolv.conf exists
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        echo "nameserver 1.1.1.1" >> /etc/resolv.conf
        
        # Clean up temporary files to reduce archive size
        rm -rf /tmp/* /var/tmp/* /var/cache/apt/archives/* /var/log/*.log.* 2>/dev/null || true
        
        # Stop services that might cause issues during archiving
        systemctl stop postfix 2>/dev/null || true
        systemctl stop rsyslog 2>/dev/null || true
        systemctl stop cron 2>/dev/null || true
    fi
    
    # Create the archive with comprehensive exclusions
    tar -czf - -C / \
        --exclude="sys" \
        --exclude="dev" \
        --exclude="run" \
        --exclude="proc" \
        --exclude="tmp/*" \
        --exclude="var/tmp/*" \
        --exclude="var/cache/*" \
        --exclude="var/log/*.log" \
        --exclude="var/log/*.log.*" \
        --exclude="var/log/*.gz" \
        --exclude="var/log/apt/*.gz" \
        --exclude="*.sql" \
        --exclude="swapfile" \
        --exclude="swap.img" \
        --exclude="lost+found" \
        --exclude=".bash_history" \
        --exclude="root/.bash_history" \
        --exclude="home/*/.bash_history" \
        --exclude="*backup.convert" \
        --exclude="var/spool/postfix/private/*" \
        --exclude="var/lib/apt/lists/*" \
        --exclude="var/lib/dpkg/*-old" \
        .
    
    # Restore original files immediately after archive creation
    if [ -f /etc/os-release.backup.convert ]; then
        mv /etc/os-release.backup.convert /etc/os-release
    fi
    if [ -f /etc/altlinux-release.backup.convert ]; then
        mv /etc/altlinux-release.backup.convert /etc/altlinux-release
    fi
    
    # Clean up temporary files
    rm -f /etc/debian_version /etc/network/interfaces /etc/resolv.conf
    
    # Restart stopped services
    systemctl start cron 2>/dev/null || true
    systemctl start rsyslog 2>/dev/null || true
    systemctl start postfix 2>/dev/null || true
}

echo "Starting conversion process for $name..."
echo "Connecting to $target:$port..."

# SSH into the target machine, execute the file system collection function
echo "Creating filesystem archive from source machine..."
ssh -p "$port" "root@$target" "$(typeset -f collectFS); collectFS" > "/tmp/$name.tar.gz"

# Check if archive was created successfully
if [ $? -ne 0 ] || [ ! -f "/tmp/$name.tar.gz" ]; then
    echo "Error: Failed to create archive from source machine!"
    exit 1
fi

# Get archive size for information
archive_size=$(du -h "/tmp/$name.tar.gz" | cut -f1)
echo "Archive created successfully: /tmp/$name.tar.gz ($archive_size)"

# Create Proxmox container with unmanaged OS type
echo "Creating Proxmox container ID $id..."
pct create "$id" "/tmp/$name.tar.gz" \
  --description "LXC converted from ALT Linux" \
  --hostname "$name" \
  --features nesting=1 \
  --memory "$memory" \
  --nameserver 8.8.8.8 \
  --net0 name=eth0,ip="$ip"/24,gw="$gateway",bridge="$bridge" \
  --rootfs "$rootsize" \
  --storage "$storage" \
  --password "$password" \
  --ostype unmanaged \
  --unprivileged 0

# Check if container was created successfully
if [ $? -eq 0 ]; then
    echo "Container $id created successfully!"
    
    # Apply post-creation fixes for ALT Linux
    echo "Applying ALT Linux specific fixes..."
    pct exec "$id" -- bash -c "
        # Fix potential service issues
        systemctl disable postfix 2>/dev/null || true
        systemctl mask postfix 2>/dev/null || true
        
        # Ensure network configuration is clean
        rm -f /etc/network/interfaces
        rm -f /etc/resolv.conf
        
        # Create fresh resolv.conf
        echo 'nameserver 8.8.8.8' > /etc/resolv.conf
        echo 'nameserver 1.1.1.1' >> /etc/resolv.conf
    "
    
    echo "Starting container..."
    pct start "$id"
    
    # Show container status
    echo "Container status:"
    pct status "$id"
    
    # Wait a moment for network to initialize
    sleep 3
    echo "Testing network connectivity..."
    pct exec "$id" -- ping -c 2 8.8.8.8 2>/dev/null && echo "Network is working!" || echo "Network may need additional configuration"
    
else
    echo "Error: Failed to create container with primary method!"
    echo "Trying alternative method with manual extraction..."
    
    # First, check if container directory exists and clean up
    if [ -d "/var/lib/lxc/$id" ]; then
        echo "Cleaning up previous container directory..."
        pct destroy $id 2>/dev/null || rm -rf "/var/lib/lxc/$id" 2>/dev/null
    fi
    
    # Create container directory structure manually
    echo "Creating container directory structure..."
    mkdir -p "/var/lib/lxc/$id"
    mkdir -p "/stg/1tb/images/$id"
    
    # Create raw disk image
    echo "Creating raw disk image..."
    qemu-img create -f raw "/stg/1tb/images/$id/vm-$id-disk-0.raw" "${rootsize}G"
    
    # Format the disk
    echo "Formatting disk..."
    mkfs.ext4 "/stg/1tb/images/$id/vm-$id-disk-0.raw"
    
    # Mount and extract archive
    echo "Mounting and extracting filesystem..."
    mount_dir=$(mktemp -d)
    mount "/stg/1tb/images/$id/vm-$id-disk-0.raw" "$mount_dir"
    
    cd "$mount_dir"
    tar xzf "/tmp/$name.tar.gz"
    
    # Create minimal config file
    cat > "/var/lib/lxc/$id/config" << EOF
lxc.include = /usr/share/lxc/config/debian.common.conf
lxc.arch = x86_64
lxc.uts.name = $name
lxc.rootfs.path = /stg/1tb/images/$id/vm-$id-disk-0.raw
lxc.mount.entry = /stg/1tb/images/$id/vm-$id-disk-0.raw rootfs ext4 defaults 0 0
lxc.net.0.type = veth
lxc.net.0.link = $bridge
lxc.net.0.flags = up
lxc.net.0.ipv4.address = $ip/24
lxc.net.0.ipv4.gateway = $gateway
lxc.net.0.name = eth0
EOF
    
    # Unmount
    cd /
    umount "$mount_dir"
    rmdir "$mount_dir"
    
    # Register container in Proxmox
    echo "Registering container in Proxmox..."
    cat > "/etc/pve/lxc/$id.conf" << EOF
arch: amd64
cores: 1
hostname: $name
memory: $memory
net0: name=eth0,bridge=$bridge,ip=$ip/24,gw=$gateway
ostype: unmanaged
rootfs: ssd_1tb:vm-$id-disk-0.raw,size=${rootsize}G
swap: 512
unprivileged: 0
EOF
    
    echo "Container $id created using alternative method!"
    echo "Starting container..."
    pct start $id
fi

# Remove the temporary file
echo "Cleaning up temporary files..."
rm -f "/tmp/$name.tar.gz"

echo "Conversion completed successfully!"
echo "Container ID: $id"
echo "IP Address: $ip"
echo "You can connect to the container using: pct enter $id"
echo ""
echo "Note: After conversion, you may want to:"
echo "1. Update /etc/apt/sources.list to Debian repositories"
echo "2. Run 'apt update && apt upgrade'"
echo "3. Check and configure services as needed"